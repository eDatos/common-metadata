import "classpath:/btdesign/common-metadata-core-dtos.btdesign"

import "classpath:/btdesign/metamac-core-common-dtos.btdesign"
import "classpath:/btdesign/export/metamac-core-common-basictype.btdesign"
import "classpath:/btdesign/export/metamac-core-common-vo.btdesign"
import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"

Application Base {
    basePackage=unused

    Module base {
		basePackage=org.siemac.metamac.common.metadata.base
		
		Entity Configuration {
			databaseTable="TB_CONFIGURATIONS"
			hint="idSequence=CONFIGURATION"
			
			String name;
			-@InternationalString legalActs cascade="all" nullable databaseColumn="LEGAL_ACTS_FK";
			String legalActsUrl nullable;
			-@InternationalString dataSharing cascade="all" nullable databaseColumn="DATA_SHARING_FK";
			String dataSharingUrl nullable;
			-@InternationalString confPolicy cascade="all" nullable databaseColumn="CONF_POLICY_FK";
			String confPolicyUrl nullable;
			-@InternationalString confDataTreatment cascade="all" nullable databaseColumn="CONF_DATA_TREATMENT_FK";
			String confDataTreatmentUrl nullable;
			-@ExternalItemBt contact nullable;
			
			Repository ConfigurationRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
			}
		}
		
		
		Service CommonMetadataBaseServiceFacade {
			>@CommonMetadataBaseService
			
			@ConfigurationDto findConfigurationById(Long id) throws MetamacException;
			List<@ConfigurationDto> findAllConfigurations throws MetamacException;
			@ConfigurationDto saveConfiguration(@ConfigurationDto configuration) throws MetamacException;
			deleteConfiguration(@ConfigurationDto configuration) throws MetamacException;
			
			List<@ExternalItemBtDto> findAllOrganisationSchemes throws MetamacException;
		}
		
		Service CommonMetadataBaseService {
			> @ConfigurationRepository
			
			@Configuration findConfigurationById(Long id) throws MetamacException;
			List<@Configuration> findAllConfigurations throws MetamacException;
			@Configuration saveConfiguration(@Configuration configuration) throws MetamacException;
			deleteConfiguration(@Configuration configuration) throws MetamacException;
		}
		
       
    }
}