import "classpath:/btdesign/common-metadata-dtos.btdesign"

import "classpath:/btdesign/export/metamac-core-common-entity.btdesign" 

Application CommonMetadata {
    basePackage=org.siemac.metamac.common.metadata

	Module core {
		basePackage=org.siemac.metamac.common.metadata.core
		
		// ----------------------------------------------------------------
		// 							FACADE SERVICES
		// ----------------------------------------------------------------
		
		Service CommonMetadataServiceFacade {
			>@CommonMetadataService
			
			// Configuration (metadata configurations)
			@ConfigurationDto findConfigurationById(Long id) throws MetamacException;
			@ConfigurationDto findConfigurationByUrn(String urn) throws MetamacException;
			List<@ConfigurationDto> findAllConfigurations throws MetamacException;
			@ConfigurationDto createConfiguration(@ConfigurationDto configuration) throws MetamacException;
			@ConfigurationDto updateConfiguration(@ConfigurationDto configuration) throws MetamacException;
			deleteConfiguration(Long configurationId) throws MetamacException;
			List<@ConfigurationDto> updateConfigurationsStatus(List<Long> configurationIds, @CommonMetadataStatusEnum status) throws MetamacException;
			@ConfigurationDto publishExternallyConfiguration(Long id) throws MetamacException;
			
			// Data Configuration
			@DataConfigurationDto findDataConfigurationById(Long id) throws MetamacException;
			@DataConfigurationDto findDataConfigurationByConfigurationKey(String configurationKey) throws MetamacException;
			List<@DataConfigurationDto> findDataConfigurationsOfSystemProperties() throws MetamacException;
			List<@DataConfigurationDto> findDataConfigurationsOfSystemPropertiesByCondition(MetamacCriteria criteria) throws MetamacException;
			List<@DataConfigurationDto> findDataConfigurationsOfDefaultValuesByCondition(MetamacCriteria criteria) throws MetamacException;			
			List<@DataConfigurationDto> findDataConfigurationsOfDefaultValues() throws MetamacException;
			@DataConfigurationDto updateDataConfiguration(@DataConfigurationDto dataConfiguration) throws MetamacException;
			List<@DataConfigurationDto> findDataConfigurationsByCondition(MetamacCriteria criteria) throws MetamacException;	
		}
		
		
		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  
		
		Service CommonMetadataService {
			> @ConfigurationRepository
			> @DataConfigurationRepository
			
			// Configuration
			@Configuration findConfigurationById(Long id) throws MetamacException;
			@Configuration findConfigurationByUrn(String urn) throws MetamacException;
			List<@Configuration> findAllConfigurations throws MetamacException;
			List<@Configuration> findConfigurationByCondition(List<ConditionalCriteria> condition) throws MetamacException;
			@Configuration createConfiguration(@Configuration configuration) throws MetamacException;
			@Configuration updateConfiguration(@Configuration configuration) throws MetamacException;
			deleteConfiguration(Long configurationId) throws MetamacException;
			List<@Configuration> updateConfigurationsStatus(List<Long> configurationIds, @CommonMetadataStatusEnum status) throws MetamacException;
			
			// Data Configuration
			@DataConfiguration findDataConfigurationById(Long id) throws MetamacException;
			@DataConfiguration findDataConfigurationByConfigurationKey(String configurationKey) throws MetamacException;
			@DataConfiguration updateDataConfiguration(@DataConfiguration dataConfiguration) throws MetamacException;
			List<@DataConfiguration> findDataConfigurationsOfSystemProperties throws MetamacException;
			List<@DataConfiguration> findDataConfigurationsOfSystemPropertiesByCondition(List<ConditionalCriteria> condition) throws MetamacException;
			List<@DataConfiguration> findDataConfigurationsOfDefaultValues throws MetamacException;
			List<@DataConfiguration> findDataConfigurationsOfDefaultValuesByCondition(List<ConditionalCriteria> condition) throws MetamacException;
			List<@DataConfiguration> findDataConfigurationsByCondition(List<ConditionalCriteria> condition) throws MetamacException;
		}
		
		
		
		// ----------------------------------------------------------------
		// 							ENTITIES
		// ---------------------------------------------------------------- 
		
		Entity Configuration {
			databaseTable="TB_CONFIGURATIONS"
			hint="idSequence=CONFIGURATION"
			
			gap
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			String code;
       		String urn length="4000";
			-@InternationalString legalActs cascade="all" nullable databaseColumn="LEGAL_ACTS_FK";
			-@InternationalString dataSharing cascade="all" nullable databaseColumn="DATA_SHARING_FK";
			-@InternationalString confPolicy cascade="all" nullable databaseColumn="CONF_POLICY_FK";
			-@InternationalString confDataTreatment cascade="all" nullable databaseColumn="CONF_DATA_TREATMENT_FK";
			-@ExternalItem contact cascade="all" nullable databaseColumn="CONTACT_FK" ;
			-@InternationalString license cascade="all" nullable databaseColumn="LICENSE_FK";
			
			boolean externallyPublished not nullable;
			-@CommonMetadataStatusEnum status not nullable;
			
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository ConfigurationRepository {
				findById;
		   		findAll;
		   		findByCondition;
		   		save;
		   		delete;
			}
		}
		
		Entity DataConfiguration {
			databaseTable="TB_DATA_CONFIGURATIONS"
			hint="idSequence=DATA_CONFIGURATIONS"
			
			gap
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			String configurationKey length="255" not nullable databaseColumn="CONF_KEY";
			String configurationValue length="4000" nullable databaseColumn="CONF_VALUE";
			boolean systemProperty not nullable;
			
			boolean externallyPublished not nullable;
			
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable; 
			
			Repository DataConfigurationRepository {
				findById;
		   		findAll;
		   		findByCondition;
		   		save;
			}
		}
    }

}